Problem 1 - The approach involves using radix sort to sort floating-point numbers by interpreting them as unsigned integers. Since direct bitwise operations on floating-point numbers are not allowed, the program typecasts the float array to an unsigned integer array. The sorting is performed in four passes, processing 8 bits at a time using 256 buckets (one for each possible byte value). After sorting, the program reorders negative numbers first while maintaining the correct floating-point order.

Problem 2 - the program sorts 4-byte integers using a hexadecimal radix sort, which processes 4 bits at a time using 16 buckets. The numbers are divided into positive and negative subsets, with negative numbers being processed in two's complement form to ensure correct ordering. The sorted negative numbers are then reconverted and merged back with the sorted positive numbers before printing the final sorted sequence.
