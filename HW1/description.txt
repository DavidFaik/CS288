Problem 1 -
	My script implements the game by following a structured approach. It begins with the `rules` function, which displays the game’s instructions to the user. The game then enters a loop where the user is prompted to input their choice, while the computer randomly selects "rock," "paper," or "scissors" from a predefined array. The `winner` function determines the outcome by comparing the user’s choice against the computer’s using conditional statements. If the choices are the same, the game results in a tie, prompting a rematch. Otherwise, the function declares a winner, breaking the loop when a player wins. The use of a loop ensures that ties lead to repeated rounds until a definitive winner is found.
	
Problem 2 -
	The script follows a structured approach to determine the properties of a given file or directory. It first checks if an argument is provided; if not, it prompts the user for input. Then, it differentiates between files and directories using conditional checks. If the input is a directory, it verifies read and execute permissions before counting files and subdirectories, using `ls -l` with `grep` to filter out directories and regular files separately. It then lists the directory contents with their sizes. If the input is a file, it checks read permissions and uses `wc` to extract the word, line, and character counts. The script then categorizes the file’s size based on its character count. If the input is neither a file nor a directory, it displays an error message. 
	
Problem 3 -
	The script follows a structured approach to back up multiple files while ensuring proper logging and organization. It first checks whether at least three filenames are provided as command-line arguments; if not, it exits with an error message. It then creates a backup directory named with the current date. For each provided file, the script verifies its existence before copying it to the backup directory. After copying, the script renames the file by appending the current date to its name. If a file does not exist, a warning is displayed, and the file is skipped. Then a log file is created within the backup directory, recording each successfully backed-up file along with its new name.
	
Problem 4 -
	The script begins by prompting the user for a directory name and verifies its existence. If the directory does not exist, the user is given the option to create it. Once inside the directory, the `navigate_directory` function allows users to explore its contents using a menu-based selection system. Users can move into subdirectories, go up one level, exit the program, or select a file for viewing. The `search_recent_files` function identifies files modified within the last 24 hours by comparing their modification timestamps. If recent files exist, the user can choose one to view. The `display_file` function facilitates file viewing, displaying content in increments of 10 lines and prompting the user to continue or exit.
