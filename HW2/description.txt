Problem 1 - For Task 1, I use grep with a case-insensitive pattern to find words that contain at least three occurrences of the letter 'a' and count them using wc -l. In Task 2, it identifies words with exactly three 'e's, ensuring that each 'e' is separated by at least one non-'e' character, using a grep pattern. Task 3a extracts all words containing at least two adjacent 'e's and saves them to a separate file. And Task 3b extracts the last three letters of these words using grep -oE '.{3}$', sorts them, counts their occurrences with uniq -c, and then displays the three most common endings.

Problem 2 - The script counts the total number of lines in the file and separately counts the lines containing `scanf` and `printf` using `grep -c`. It appends all lines containing `scanf` to `scanf_log.txt` and those containing `printf` to `printf_log.txt`, ensuring that existing logs are not overwritten. Finally, the script calculates the percentage of lines that include `scanf` and `printf` relative to the total number of lines and outputs the result.

Problem 3 - The script processes a given directory to extract unique email addresses from text files. It recursively traverses the directory and its subdirectories without using the `find` command, identifying all `.txt` files. Using a regular expression, the script extracts valid email addresses from each file using grep, appending them to a temporary storage file. Once all files have been processed, the script removes duplicates, sorts the email addresses alphabetically using sort, and saves them to `unique_emails.txt` in the scriptâ€™s directory. 

Problem 4 - The script begins by using `grep` with a regular expression to filter lines where the city field contains two or more words. This is achieved by checking for a space between words in the city name. The script then processes each valid line using a `while` loop. Inside the loop, `sed` is used to extract the person's name and date of birth from each line. The date of birth is used to extract the birth year, which is used to calculate the person's age, assuming the current year is 2024. Then the script prints the name and age for each person and sorts the results in descending order based on age. 
